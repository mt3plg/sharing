generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(uuid())
  name                   String
  email                  String           @unique
  phone                  String           @unique
  password               String
  status                 String           @default("pending")
  verificationToken      String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  locationName           String?
  latitude               Float?
  longitude              Float?
  rating                 Float?           @default(0.0)
  driverTrips            Int?             @default(0)
  passengerTrips         Int?             @default(0)
  avatar                 String?
  stripeCustomerId       String?
  stripeAccountId        String?
  driverRides            Ride[]           @relation("DriverRides")
  passengerRides         Ride[]           @relation("PassengerRides")
  conversations          Conversation[]   @relation("UserConversations")
  targetConversations    Conversation[]   @relation("TargetUser")
  messages               Message[]        @relation("UserMessages")
  reviewsReceived        Review[]         @relation("UserReviews")
  reviewsGiven           Review[]         @relation("AuthorReviews")
  friendsInitiated       Friend[]         @relation("UserFriends")
  friendsReceived        Friend[]         @relation("FriendFriends")
  bookingRequests        BookingRequest[] @relation("UserBookingRequests")
  sentFriendRequests     FriendRequest[]  @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]  @relation("ReceivedFriendRequests")
  paymentMethods         PaymentMethod[]  @relation("UserPaymentMethods")
  payments               Payment[]        @relation("UserPayments")
  payouts                Payout[]         @relation("UserPayouts")
}

model Ride {
  id              String           @id @default(uuid())
  driverId        String
  driver          User             @relation("DriverRides", fields: [driverId], references: [id])
  passengerId     String?
  passenger       User?            @relation("PassengerRides", fields: [passengerId], references: [id])
  startLocation   String
  startCoordsLat  Float?
  startCoordsLng  Float?
  endLocation     String
  endCoordsLat    Float?
  endCoordsLng    Float?
  departureTime   DateTime
  availableSeats  Int
  vehicleType     String?
  status          String           @default("active")
  fare            Float?
  distance        Float?
  duration        Int?
  paymentType     String?          @default("both")
  selectedCardId  String?
  selectedCard    PaymentMethod?   @relation("RideSelectedCard", fields: [selectedCardId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  conversations   Conversation[]   @relation("RideConversations")
  bookingRequests BookingRequest[] @relation("RideBookingRequests")
  payments        Payment[]        @relation("RidePayments")
}

model PaymentMethod {
  id                    String   @id @default(uuid())
  userId                String
  user                  User     @relation("UserPaymentMethods", fields: [userId], references: [id])
  stripePaymentMethodId String   @unique
  type                  String
  last4                 String?
  brand                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  selectedRides         Ride[]   @relation("RideSelectedCard")
}

model Conversation {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation("UserConversations", fields: [userId], references: [id])
  rideId       String?
  ride         Ride?     @relation("RideConversations", fields: [rideId], references: [id], onDelete: Cascade)
  targetUserId String
  targetUser   User      @relation("TargetUser", fields: [targetUserId], references: [id])
  category     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[] @relation("ConversationMessages")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  read           Boolean      @default(false)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  authorId  String
  author    User     @relation("AuthorReviews", fields: [authorId], references: [id])
  rating    Float
  comment   String
  createdAt DateTime @default(now())
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friendId  String
  friend    User     @relation("FriendFriends", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
}

model BookingRequest {
  id             String   @id @default(uuid())
  rideId         String
  ride           Ride     @relation("RideBookingRequests", fields: [rideId], references: [id], onDelete: Cascade)
  passengerCount Int      @default(1)
  passengerId    String
  passenger      User     @relation("UserBookingRequests", fields: [passengerId], references: [id])
  status         String   @default("pending")
  createdAt      DateTime @default(now())
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}

model Payment {
  id                    String   @id @default(uuid())
  rideId                String
  ride                  Ride     @relation("RidePayments", fields: [rideId], references: [id], onDelete: Cascade, map: "payment_rideId_fkey")
  userId                String
  user                  User     @relation("UserPayments", fields: [userId], references: [id])
  stripePaymentIntentId String?  @unique
  amount                Float
  currency              String
  paymentMethod         String
  status                String
  isPaid                Boolean  @default(false)
  commission            Float?
  driverAmount          Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Payout {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation("UserPayouts", fields: [userId], references: [id])
  stripePayoutId String   @unique
  amount         Float
  currency       String
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
